install.packages('dplyr')
install.packages('plyr')
install.packages('ggplot2')
install.packages('rmongodb')
install.packages('randomForest')
install.packages("XGBoost")
install.packages('xgboost')
install.packages('e1071')
install.packages("Rcpp")
sqrt(443)
amortize <- function(p_input = 25000, i_input = .10, n_months = 36,
output = "table", index = NULL) {
n_months <- rep(n_months, length(p_input))
if(is.null(index)) {
index <- matrix(rep(1:length(n_months), each = n_months[1]),
nrow = n_months[1])
} else {
index <- matrix(rep(index, each = n_months[1]), nrow = n_months[1])
}
p_input <- matrix(p_input, ncol = length(p_input))
i_input <- matrix(i_input, ncol = length(i_input))
i_monthly <- i_input / (12)
payment <- p_input * i_monthly / (1 - (1 + i_monthly)^(-n_months[1]))
Pt <- p_input # current principal or amount of loan
currP <- NULL
for(i in 1:n_months[1]) {
H <- Pt * i_monthly # current monthly interest
C <- payment - H # monthly payment minus monthly interest (principal paid for each month)
Q <- Pt - C # new balance of principal of loan
Pt <- Q # loops through until balance goes to zero
currP <- rbind(currP, Pt)
}
amortization <- rbind(p_input, currP[1:(n_months[1]-1),, drop = FALSE])
monthly_principal <- amortization - currP
monthly_interest <- rbind(
(matrix(
rep(payment, n_months[1]),
nrow = n_months[1],
byrow = TRUE) - monthly_principal)[1:(n_months[1]-1),, drop = FALSE],
rep(0, length(n_months)))
monthly_interest[1:nrow(monthly_interest) %% 12 == 0] <-
monthly_principal[1:nrow(monthly_interest) %% 12 == 0] * i_monthly
monthly_payment <- monthly_principal + monthly_interest
installment <- matrix(rep(1 : n_months[1], length(n_months)),
nrow = n_months[1])
input <- list(
"amortization" = amortization,
"payment" = monthly_payment,
"principal" = monthly_principal,
"interest" = monthly_interest,
"installment" = installment,
"index" = index)
out <- switch(output,
"list" = input,
"table" = as.data.frame(
lapply(input, as.vector),
stringsAsFactors = FALSE),
"balance" = as.data.frame(
lapply(input[c("index", "amortization")], as.vector),
stringsAsFactors = FALSE),
"payment" = as.data.frame(
lapply(input[c("index", "payment")], as.vector),
stringsAsFactors = FALSE),
"principal" = as.data.frame(
lapply(input[c("index", "principal")], as.vector),
stringsAsFactors = FALSE),
"interest" = as.data.frame(
lapply(input[c("index", "interest")], as.vector),
stringsAsFactors = FALSE)
)
out
}
amortize(p_input=1000, 0.0625)
12*5
amortize(p_input=1000, i_input = 0.0625, n_months = 60)
amortize(p_input=1000, i_input = 0.068, n_months = 60)
amortize(p_input=1000, i_input = 0.068, n_months = 60, index=NULL)
setwd("~/Desktop/Desktop_jan27/MyLife/SchoolWork/UVA/Spring_Term/DataVisualization/Election_Visual/Data/IncomeData")
df <- read.csv("COMBINED_2012.csv", header=T)
head(df)
setwd("~/Desktop/Desktop_jan27/MyLife/SchoolWork/UVA/Spring_Term/DataVisualization/Election_Visual/Data/ElectionData")
election <- read.csv("2012_full_election_county2.csv", header=T)
head(election)
total <- merge(df, election, by='county_id')
head(total)
obama <- total[which(total$percent_obama > 0.5), ]
total$percent_obama <- as.numeric(total$percent_obama)
total$percent_romney <- as.numeric(total$percent_romney)
obama <- total[which(total$percent_obama > 0.5), ]
dim(obama)
obama
summary(total$percent_obama)
total$percent_obama <- as.numeric(total$percent_obama)
total$percent_romney <- as.numeric(total$percent_romney)
obama <- total[which(total$percent_obama > 0.5), ]
dim(obama)
obama <- total[which(total$percent_obama > 50), ]
dim(obama)
romney <- total[which(total$percent_romney > 50),]
summary(obama)
summary(obama$median_income)
summary(romney$median_income)
which(obama$median_income == 22150)
which(obama$median_income < 22150)
which(obama$median_income < 22151)
which(obama$median_income < 23000)
total$median_income <- as.numeric(total$median_income)
which(obama$median_income < 23000)
which(obama$median_income < 30000)
which(obama$median_income < 23361)
obama[693,]
